#
# Function call to generate the costs between closest nodes to bike stations.
#    

def fetchPaths():
	import csv;
	f = csv.writer(open("pathLengths.csv", "wb"));
	
	listIds = [115870, 118581, 118315, 167942, 167148, 185503, 174147, 174155, 117348, 116348, 110717, 182973, 176649, 112460, 110773, 176504, 166171, 111421, 111579, 167707, 169184, 169180, 110577, 111943, 113525, 112541, 315231, 176942, 250451, 113263, 315132, 111009, 251607, 250701, 312229, 311939, 250315, 176674, 176525, 173252, 111770, 166150, 169652, 169160, 170837, 110968, 112075, 112742, 176651, 187974, 170036, 112455, 312623, 280425, 176475, 186333, 112355, 1697, 176497, 176195, 177039, 250536, 250303, 311144, 171298, 250645, 110213, 110431, 315149, 176824, 170070, 112877, 169790, 252408, 191188, 176198, 251225, 112049, 171299, 169733, 110775, 176673, 112603, 110621, 318876, 111229, 177009, 169708, 313263, 111910, 1620, 315192, 311127, 110789, 250919, 251640, 311131, 166794, 176946, 111356, 176695, 176807, 176811, 111157, 112200, 113332, 315162, 113893, 169714, 110916, 176207, 111406, 176947, 172622, 112994, 176945, 166066, 118287, 172069, 172065, 116128, 166496, 250019, 110800, 172073, 110792, 187972, 169175, 115565, 172060, 185550, 171279, 110172, 113235, 431, 169159, 176850, 171124, 113089, 111435, 250861, 111002, 315046, 112752, 318953, 251802, 116411, 181731, 116044, 169161, 168382, 116685, 113541, 176901, 110216, 118624, 116355, 174295, 167089, 169495, 187875, 176922, 172102, 118198, 115754, 117910, 118640, 181719, 113153, 250692, 116268, 181733, 115516, 1493, 176815, 172432, 176818, 176247, 134374, 131256, 172316, 134165, 177012, 132489, 175789, 134710, 134697, 177104, 166819, 171296, 167327, 117483, 117918, 113764, 169906, 186517, 110423, 176707, 175147, 182747, 182327, 115571, 111375, 176724, 173148, 182253, 110360, 173880, 187831, 118610, 116689, 115709, 117109, 108955, 113669, 116605, 174740, 176479, 174397, 251900, 166785, 318955, 315280, 251876, 318884, 313250, 250163, 249988, 311948, 252320, 113036, 182905, 116687, 116446, 118081, 114037, 166267, 113642, 110695, 166045, 169946, 113594, 251180, 117118, 117939, 171981, 107092, 108483, 108858, 248152, 248193, 167568, 198017, 107574, 204903, 108349, 109302, 108285, 108215, 174863, 112999, 181725, 110947, 252343, 199050, 248740, 196979, 108371, 203034, 108007, 201995, 193454, 173915, 108256, 293, 108562, 167571, 108261, 207348, 242781, 196320, 199537, 108907, 1577, 181619, 240108, 246886, 112336, 110211, 315658, 251661, 171613, 185961, 117708, 109180, 109290, 171118, 170763, 182284, 117589, 173097, 249477, 245600, 181617, 199335, 176997, 390, 173004, 314786, 115579, 115789, 193606, 174879, 195231, 170136, 117379, 190768, 131696, 190959, 116574, 111213, 116048, 191202, 190128, 131472, 190155, 182728, 182733, 133325, 134383, 116129, 1464, 116918, 177055, 169522, 111214, 167496, 171288, 116472, 250657, 115879, 166484, 190641, 176675, 167947, 111471, 117503, 176244, 170194, 176626, 176526, 177048, 185495, 182074, 115741, 170835, 185493, 249598, 176918, 175735, 166269, 112305, 116999]

	for i in listIds:
		query = "\
	        SELECT * \
	        from pathCosts(\
	            {0})\
	    ".format(i)
		edges = db_session_routing.execute(query).fetchall()
		f.writerows(edges)

	# for i, j in [(i.id, j.id) for i in bikes for j in bikes if i.id < j.id]:
	# 	query = "\
	#         SELECT seq, id1 AS node, id2 AS edge, reverse_cost  \
	#         from pgr_dijkstra(' \
	#             select id, \
	#                 source::integer, \
	#                 target::integer, \
	#                 cost::double precision \
	#                 from ways', \
	#             {0}, {1}, false, false) \
	#         a left join ways b \
	#         on a.id2 = b.id; \
	#     ".format(i, j)
	# 	edges = db_session_routing.execute(query).fetchall()
	# 	f.writerows(edges)